import 'package:flutter/material.dart';

class DecorationUtils {
  static InputDecoration getDropDownFieldDecoration(
      {double? radius,
        Widget? icon,
        String? labelText,
        TextStyle? labelStyle,
        String? helperText,
        TextStyle? helperStyle,
        int? helperMaxLines,
        String? hintText,
        TextStyle? hintStyle,
        int? hintMaxLines,
        String? errorText,
        TextStyle? errorStyle,
        int? errorMaxLines,
        bool? hasFloatingPlaceholder = true,
        FloatingLabelBehavior floatingLabelBehavior =
            FloatingLabelBehavior.always,
        bool? isCollapsed = false,
        bool? isDense,
        EdgeInsetsGeometry? contentPadding,
        Widget? prefixIcon,
        BoxConstraints? prefixIconConstraints,
        Widget? prefix,
        String? prefixText,
        TextStyle? prefixStyle,
        Widget? suffixIcon,
        Widget? suffix,
        String? suffixText,
        TextStyle? suffixStyle,
        BoxConstraints? suffixIconConstraints,
        Widget? counter,
        String? counterText,
        TextStyle? counterStyle,
        bool? filled,
        Color? fillColor,
        Color? focusColor,
        Color? hoverColor,
        InputBorder? errorBorder,
        InputBorder? focusedBorder,
        InputBorder? focusedErrorBorder,
        InputBorder? disabledBorder,
        InputBorder? enabledBorder,
        InputBorder? border,
        bool? enabled = true,
        String? semanticCounterText,
        bool? alignLabelWithHint}) {
    return InputDecoration(
      icon: icon,
      labelText: labelText,
      labelStyle: labelStyle,
      helperText: helperText,
      helperStyle: helperStyle,
      helperMaxLines: helperMaxLines,
      hintText: hintText,
      hintStyle: hintStyle,
      hintMaxLines: hintMaxLines,
      errorText: errorText,
      errorStyle: errorStyle,
      errorMaxLines: errorMaxLines,
      floatingLabelBehavior: floatingLabelBehavior,
      isCollapsed: isCollapsed!,
      isDense: isDense,
      contentPadding: contentPadding ?? const EdgeInsets.all(0),
      prefixIcon: prefixIcon,
      prefixIconConstraints: prefixIconConstraints,
      prefix: prefix,
      prefixText: prefixText,
      prefixStyle: prefixStyle,
      suffixIcon: suffixIcon,
      suffix: suffix,
      suffixText: suffixText,
      suffixStyle: suffixStyle,
      suffixIconConstraints: suffixIconConstraints,
      counter: counter,
      counterText: counterText,
      counterStyle: counterStyle,
      filled: filled,
      fillColor: fillColor,
      focusColor: focusColor,
      hoverColor: hoverColor,
      errorBorder: errorBorder,
      focusedBorder: focusedBorder??const UnderlineInputBorder(
          borderSide: BorderSide(color: Colors.grey)),
      focusedErrorBorder: focusedErrorBorder,
      disabledBorder: disabledBorder,
      enabledBorder: enabledBorder??const UnderlineInputBorder(
          borderSide: BorderSide(color: Colors.grey)),
      border: border ?? const UnderlineInputBorder(),
      enabled: enabled!,
      semanticCounterText: semanticCounterText,
      alignLabelWithHint: alignLabelWithHint,
    );
  }

  static InputDecoration getTextFieldDecoration(
      {
        Widget? icon,
        String? labelText,
        TextStyle? labelStyle,
        String? helperText,
        TextStyle? helperStyle,
        int? helperMaxLines,
        String? hintText,
        TextStyle? hintStyle,
        int? hintMaxLines,
        String? errorText,
        TextStyle? errorStyle,
        int? errorMaxLines,
        bool? hasFloatingPlaceholder = true,
        FloatingLabelBehavior floatingLabelBehavior =
            FloatingLabelBehavior.always,
        bool? isCollapsed = false,
        bool? isDense,
        EdgeInsetsGeometry? contentPadding,
        Widget? prefixIcon,
        BoxConstraints? prefixIconConstraints,
        Widget? prefix,
        String? prefixText,
        TextStyle? prefixStyle,
        Widget? suffixIcon,
        Widget? suffix,
        String? suffixText,
        TextStyle? suffixStyle,
        BoxConstraints? suffixIconConstraints,
        Widget? counter,
        String? counterText,
        TextStyle? counterStyle,
        bool? filled,
        Color? fillColor,
        Color? focusColor,
        Color? hoverColor,
        InputBorder? errorBorder,
        InputBorder? focusedBorder,
        InputBorder? focusedErrorBorder,
        InputBorder? disabledBorder,
        InputBorder? enabledBorder,
        InputBorder? border,
        bool? enabled = true,
        String? semanticCounterText,
        bool? alignLabelWithHint}) {
    return InputDecoration(
      icon: icon,
      labelText: labelText,
      labelStyle: labelStyle,
      helperText: helperText,
      helperStyle: helperStyle,
      helperMaxLines: helperMaxLines,
      hintText: hintText,
      hintStyle: hintStyle,
      hintMaxLines: hintMaxLines,
      errorText: errorText,
      errorStyle: errorStyle,
      errorMaxLines: errorMaxLines,
      // hasFloatingPlaceholder: hasFloatingPlaceholder,
      floatingLabelBehavior: floatingLabelBehavior,
      isCollapsed: isCollapsed!,
      isDense: isDense,
      contentPadding: contentPadding ?? const EdgeInsets.only(left: 0),
      prefixIcon: prefixIcon,
      prefixIconConstraints: prefixIconConstraints,
      prefix: prefix,
      prefixText: prefixText,
      prefixStyle: prefixStyle,
      suffixIcon: suffixIcon,
      suffix: suffix,
      suffixText: suffixText,
      suffixStyle: suffixStyle,
      suffixIconConstraints: suffixIconConstraints,
      counter: counter,
      counterText: counterText,
      counterStyle: counterStyle,
      filled: filled,
      fillColor: fillColor,
      focusColor: focusColor,
      hoverColor: hoverColor,
      errorBorder: errorBorder,
      focusedBorder: focusedBorder??
          const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.grey)),
      focusedErrorBorder: focusedErrorBorder,
      disabledBorder: disabledBorder,
      enabledBorder: enabledBorder??
          const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.grey)),
      border: border ?? const UnderlineInputBorder(),
      enabled: enabled!,
      semanticCounterText: semanticCounterText,
      alignLabelWithHint: alignLabelWithHint,
    );
  }
}